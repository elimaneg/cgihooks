#!/bin/bash

# This code for getting code from post data is from http://oinkzwurgl.org/bash_cgi and 
# was written by Phillippe Kehi <phkehi@gmx.net> and flipflip industries 
# elimane.gueye@gmail : process gitlab system hook

# (internal) routine to store POST data 
function cgi_get_POST_vars() { 
 # check content type 
 #[ "${CONTENT_TYPE}" != "application/x-www-form-urlencoded" ] && \
 #echo "Warning: you should probably use MIME type "\ "application/x-www-form-urlencoded!" 1>&2 
 # save POST variables (only first time this is called) 
 #echo "QUERY_STRING_POST = $QUERY_STRING_POST" 1>&2
 #echo "REQUEST_METHOD = $REQUEST_METHOD" 1>&2
 #echo "CONTENT_LENGTH = $CONTENT_LENGTH" 1>&2
 [ -z "$QUERY_STRING_POST" -a "$REQUEST_METHOD" = "POST" -a ! -z "$CONTENT_LENGTH" ] && \
 read -n $CONTENT_LENGTH QUERY_STRING_POST 
 return 
} 

# (internal) routine to decode urlencoded strings
function cgi_decodevar() { 
 [ $# -ne 1 ] && return 
 local v t h 
 # replace all + with whitespace and append %% 
 t="${1//+/ }%%" 
 while [ ${#t} -gt 0 -a "${t}" != "%" ]; do 
  v="${v}${t%%\%*}" 
  # digest up to the first % 
  t="${t#*%}" 
  # remove digested part 
  # decode if there is anything to decode and if not at end of string 
  if [ ${#t} -gt 0 -a "${t}" != "%" ]; then 
    h=${t:0:2} 
    # save first two chars 
    t="${t:2}" 
    # remove these 
    v="${v}"`echo -e \\\\x${h}` 
    # convert hex to special char 
  fi 
 done 
 # return decoded string 
 echo "${v}" 
 return 
} 


# routine to get variables from http requests 
# usage: cgi_getvars method varname1 [.. varnameN] 
# method is either GET or POST or BOTH 
# the magic varible name ALL gets everything 

function cgi_getvars() { 
 [ $# -lt 2 ] && return 
 local q p k v s 
 # get query 
 case $1 in 
      GET) [ ! -z "${QUERY_STRING}" ] && q="${QUERY_STRING}&" ;; 
      POST) cgi_get_POST_vars 
            [ ! -z "${QUERY_STRING_POST}" ] && q="${QUERY_STRING_POST}&" ;; 
      BOTH) [ ! -z "${QUERY_STRING}" ] && q="${QUERY_STRING}&" 
            cgi_get_POST_vars 
            [ ! -z "${QUERY_STRING_POST}" ] && q="${q}${QUERY_STRING_POST}&" ;; 
 esac 
 shift 
 s=" $* " 
 # parse the query data 
 while [ ! -z "$q" ]; do 
   p="${q%%&*}"  # get first part of query string 
   k="${p%%=*}"  # get the key (variable name) from it 
   v="${p#*=}"   # get the value from it 
   q="${q#$p&*}" # strip first part from query string 
   # decode and evaluate var if requested 
   #[ "$1" = "ALL" -o "${s/ $k /}" != "$s" ] && eval "$k=\"`cgi_decodevar \"$v\"`\"" 
   #[ "$1" = "ALL" -o "${s/ $k /}" != "$s" ] && echo "Cle = $q" 1>&2 && echo "Valeur = $v" 1>&2
 done 
 _GIT="/data/gitlab/prd/git/bin/git"
 _TEMPO=5
 _EVENT=$(echo $v|jq -r '.event_name')
 _BRANCHS="integration developpement"
 _GITEMAIL=stdevadm@local.host
 _GITNAME="Administrateur Git"
 _GITLAB_URL="https://lcom501d/gitlab/"
 _GIT_REPOS_BASE="/data/gitlab/prd/apps/gitlab/repositories" 
 ############### DESACTIVE le 22 Juin 2014 en attendant de reorganiser le workflow de creation des projets
 if [ "${_EVENT}" = "XXXXproject_create" ]; then
   _PROJECT=$(echo $v|jq -r '.name')
   _NAMESPACE="$(echo $v|jq -r '.path_with_namespace')"
   _REPOS=${_GIT_REPOS_BASE}/${_NAMESPACE}.git
   _MRLINK="${_GITLAB_URL}/${_NAMESPACE}/merge_requests"
   rm -rf $_PROJECT && mkdir $_PROJECT && \
   export HOME=$(getent passwd git|cut -d":" -f6) && cd $_PROJECT && \
   ${_GIT} init 1>&2 && sed -e "s@_MR_@${_MRLINK}@g" ../templates/README.md.master > README.md && \
   ${_GIT} add README.md && \
   ${_GIT} commit -m "Hook Systeme" 1>&2 && \
   ${_GIT} remote add origin $_REPOS 1>&2 && \
   echo "waiting $_TEMPO secs to let Gitlab finish the repos setup before committing changes" 1>&2 && \
   sleep $_TEMPO && \
   ${_GIT} push -u origin master 1>&2

   #for _branch in $(echo ${_BRANCHS}); do
   # Integration
   echo "Creation de la branche d'integration..." 1>&2
   #${_GIT} checkout -b integration master 1>&2 && sed -e "s@_MR_@${_MRLINK}@g" ../README.md.int > README.md && \
   ${_GIT} checkout -b integration 1>&2 && sed -e "s@_MR_@${_MRLINK}@g" ../templates/README.md.int > README.md && \
   ${_GIT} add README.md && ${_GIT} commit -m "Hook Systeme" 1>&2 && ${_GIT} push origin integration 1>&2
   
   # Developpement
   echo "Creation de la branche de developpement..." 1>&2
   ${_GIT} checkout -b developpement integration 1>&2 && sed -e "s@_MR_@${_MRLINK}@g" ../templates/README.md.dev > README.md && \
   ${_GIT} add README.md && ${_GIT} commit -m "Hook Systeme" 1>&2 && ${_GIT} push origin developpement 1>&2
   
   #done
   echo "Commit des branches dans le depot" 1>&2
   cd .. && rm -rf $_PROJECT
 fi
 echo  "Ca marche+++++++++++++++++++++++++++++++++++++"
 echo  
return 
}
# pour recuperer les variables d'env du serveur dans les logs d'erreurs
#env 1>&2 
cgi_getvars POST ALL
